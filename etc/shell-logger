# shellcheck disable=SC2148

## Description {{{
#
# Logger for shell script.
#
# Homepage: https://github.com/rcmdnk/shell-logger
#
_LOGGER_NAME="shell-logger"
_LOGGER_VERSION="v0.3.2"
_LOGGER_DATE="26/Jun/2025"
# }}}

## License {{{
#
#MIT License
#
#Copyright (c) 2017 rcmdnk
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.
# }}}

# Default variables {{{
LOGGER_DATE_FORMAT=${LOGGER_DATE_FORMAT:-'%Y/%m/%d %H:%M:%S'}
LOGGER_LEVEL=${LOGGER_LEVEL:-1} # 0: debug, 1: info, 2: notice, 3: warning, 4: error
LOGGER_STDERR_LEVEL=${LOGGER_STDERR_LEVEL:-4}
LOGGER_DEBUG_COLOR=${LOGGER_DEBUG_COLOR:-3}
LOGGER_INFO_COLOR=${LOGGER_INFO_COLOR:-""}
LOGGER_NOTICE_COLOR=${LOGGER_NOTICE_COLOR:-36}
LOGGER_WARNING_COLOR=${LOGGER_WARNING_COLOR:-33}
LOGGER_ERROR_COLOR=${LOGGER_ERROR_COLOR:-31}
LOGGER_COLOR=${LOGGER_COLOR:-auto}
LOGGER_COLORS=("$LOGGER_DEBUG_COLOR" "$LOGGER_INFO_COLOR" "$LOGGER_NOTICE_COLOR" "$LOGGER_WARNING_COLOR" "$LOGGER_ERROR_COLOR")
if [ "${LOGGER_LEVELS:-}" = "" ];then
  LOGGER_LEVELS=("DEBUG" "INFO" "NOTICE" "WARNING" "ERROR")
fi
LOGGER_SHOW_TIME=${LOGGER_SHOW_TIME:-1}
LOGGER_SHOW_FILE=${LOGGER_SHOW_FILE:-1}
LOGGER_SHOW_LEVEL=${LOGGER_SHOW_LEVEL:-1}
LOGGER_ERROR_RETURN_CODE=${LOGGER_ERROR_RETURN_CODE:-100}
LOGGER_ERROR_TRACE=${LOGGER_ERROR_TRACE:-1}

LOGGER_FILE_OUTPUT=${LOGGER_FILE_OUTPUT:-}
LOGGER_FILE_ONLY=${LOGGER_FILE_ONLY:-0}
LOGGER_FILE_LEVEL=${LOGGER_FILE_LEVEL:-$LOGGER_LEVEL}
LOGGER_FILE_APPEND=${LOGGER_FILE_APPEND:-0}
# }}}

# Other global variables {{{
_LOGGER_WRAP=0
_LOGGER_FILE_APPEND=${LOGGER_FILE_APPEND}
#}}}

# Functions {{{
_logger_version () {
  printf "%s %s %s\\n" "$_LOGGER_NAME" "$_LOGGER_VERSION" "$_LOGGER_DATE"
}

_logger_time () {
  [ "$LOGGER_SHOW_TIME" -ne 1 ] && return
  printf "[%s]" "$(date +"$LOGGER_DATE_FORMAT")"
}

_logger_file () {
  [ "$LOGGER_SHOW_FILE" -ne 1 ] && return
  local i=0
  if [ $# -ne 0 ];then
    i=$1
  fi
  if [ -n "$BASH_VERSION" ];then
    printf "[%s:%s]" "${BASH_SOURCE[$((i+1))]}" "${BASH_LINENO[$i]}"
  else
    emulate -L ksh
    # shellcheck disable=SC2154
    printf "[%s]" "${funcfiletrace[$i]}"  # jkk
  fi
}

_logger_level () {
  [ "$LOGGER_SHOW_LEVEL" -ne 1 ] && return
  if [ $# -eq 1 ];then
    local level=$1
  else
    local level=1
  fi
  [ -z "${ZSH_VERSION:-}" ] || emulate -L ksh
  printf "[%s]" "${LOGGER_LEVELS[$level]}"
}

_logger_get_level () {
  if [ $# -eq 0 ];then
    local level=1
  else
    local level=$1
  fi
  if ! expr "$level" : '[0-9]*' >/dev/null;then
    [ -z "${ZSH_VERSION:-}" ] || emulate -L ksh
    local i=0
    while [ $i -lt ${#LOGGER_LEVELS[@]} ];do
      if [ "$level" = "${LOGGER_LEVELS[$i]}" ];then
        level=$i
        break
      fi
      ((i++))
    done
  fi
  echo "$level"
}

_logger_get_file_level () {
  if [ "$LOGGER_FILE_OUTPUT" = "" ];then
    echo 100
  else
    _logger_get_level "$LOGGER_FILE_LEVEL"
  fi
}

_logger_get_std_level () {
  if [ "$LOGGER_FILE_ONLY" -eq 1 ];then
    echo 100
  else
    _logger_get_level "$LOGGER_LEVEL"
  fi
}

_logger_check_level () {
  if [ $# -eq 0 ];then
    return 1
  fi
  local level="$1"
  local file_level=100
  local std_level=100
  if [ "$LOGGER_FILE_OUTPUT" != "" ];then
    local file_level
    file_level="$(_logger_get_level "$LOGGER_FILE_LEVEL")"
    if [ "$LOGGER_FILE_ONLY" -eq 1 ];then
      if [ "$level" -lt "$file_level" ];then
        return 1
      fi
      return 0
    fi
  fi

  std_level="$(_logger_get_level "$LOGGER_LEVEL")"
  local check_level="$std_level"
  if [ "$file_level" -lt "$std_level" ];then
    check_level="$file_level"
  fi

  if [ "$level" -lt "$check_level" ];then
    return 1
  fi
  return 0
}

_logger () {
  ((_LOGGER_WRAP++)) || true
  local wrap=${_LOGGER_WRAP}
  _LOGGER_WRAP=0
  if [ $# -eq 0 ];then
    return
  fi
  local level
  level="$1"
  shift
  local file_level
  file_level="$(_logger_get_file_level)"
  local std_level
  std_level="$(_logger_get_std_level)"
  if [ "$level" -lt "$file_level" ] && [ "$level" -lt "$std_level" ];then
    return
  fi
  local msg_prefix
  msg_prefix="$(_logger_time)$(_logger_file "$wrap")$(_logger_level "$level")"
  local msg="${msg_prefix:+$msg_prefix }$*" # add prefix with a space only if prefix not is empty

  if [ "$LOGGER_FILE_OUTPUT" != "" ] && [ "$level" -ge "$file_level" ];then
    if [ "$_LOGGER_FILE_APPEND" -eq 1 ];then
      echo "$msg" >> "$LOGGER_FILE_OUTPUT"
    else
      echo "$msg" > "$LOGGER_FILE_OUTPUT"
      _LOGGER_FILE_APPEND=1
    fi
  fi

  if [ "$LOGGER_FILE_ONLY" -eq 1 ] || [ "$level" -lt "$std_level" ];then
    return
  fi

  local out=1
  if [ "$level" -ge "$LOGGER_STDERR_LEVEL" ];then
    out=2
  fi
  if [ "$LOGGER_COLOR" = "always" ] || { test "$LOGGER_COLOR" = "auto"  && test  -t $out ; };then
    [ -z "${ZSH_VERSION:-}" ] || emulate -L ksh
    printf "\e[${LOGGER_COLORS[$level]}m%s\e[m\n" "$msg" >&"$out"
  else
    printf "%s\n" "$msg" >&"$out"
  fi
}

debug () {
  ((_LOGGER_WRAP++)) || true
  _logger 0 "$*"
}

information () {
  ((_LOGGER_WRAP++)) || true
  _logger 1 "$*"
}

info () {
  ((_LOGGER_WRAP++)) || true
  information "$*"
}

notification () {
  ((_LOGGER_WRAP++)) || true
  _logger 2 "$*"
}

notice () {
  ((_LOGGER_WRAP++)) || true
  notification "$*"
}

warning () {
  ((_LOGGER_WRAP++)) || true
  _logger 3 "$*"
}

warn () {
  ((_LOGGER_WRAP++)) || true
  warning "$*"
}

_logger_print_traceback () {
  [ -z "${ZSH_VERSION:-}" ] || emulate -L ksh
  if [ -n "$BASH_VERSION" ];then
    local i=$((${#FUNCNAME[@]}-2))
  else
    local i=$((${#funcstack[@]}-1))
    local last_source=${funcfiletrace[$i]%:*}
    if [ "$last_source" = zsh ];then
      ((i--))
    fi
  fi
  if [ $i -ge $_LOGGER_WRAP ];then
    echo "Traceback (most recent call last):"
  fi
  while [ $i -ge $_LOGGER_WRAP ];do
    if [ -n "$BASH_VERSION" ];then
      local file=${BASH_SOURCE[$((i+1))]}
      local line=${BASH_LINENO[$i]}
      local func=""
      if [ ${BASH_LINENO[$((i+1))]} -ne 0 ];then
        if [ "${FUNCNAME[$((i+1))]}" = "source" ];then
          func=", in ${BASH_SOURCE[$((i+2))]}"
        else
          func=", in ${FUNCNAME[$((i+1))]}"
        fi
      fi
      local func_call="${FUNCNAME[$i]}"
      if [ "$func_call" = "source" ];then
        func_call="${func_call} ${BASH_SOURCE[$i]}"
      else
        func_call="${func_call}()"
      fi
    else
      local file=${funcfiletrace[$i]%:*}
      local line=${funcfiletrace[$i]#*:}
      local func=""
      if [ -n "${funcstack[$((i+1))]}" ];then
        if [ "${funcstack[$((i+1))]}" = "${funcfiletrace[$i]%:*}" ];then
          func=", in ${funcfiletrace[$((i+1))]%:*}"
        else
          func=", in ${funcstack[$((i+1))]}"
        fi
      fi
      local func_call="${funcstack[$i]}"
      if [ "$func_call" = "${funcfiletrace[$((i-1))]%:*}" ];then
        func_call="source ${funcfiletrace[$((i-1))]%:*}"
      else
        func_call="${func_call}()"
      fi
    fi
    echo "  File \"${file}\", line ${line}${func}"
    if [ $i -gt $_LOGGER_WRAP ];then
      echo "    $func_call"
    else
      echo ""
    fi
    ((i--))
  done
}

error () {
  ((_LOGGER_WRAP++)) || true
  if [ "$LOGGER_ERROR_TRACE" -eq 1 ];then
    {
      _logger_print_traceback
    } 1>&2
  fi
  _logger 4 "$*"
  return "$LOGGER_ERROR_RETURN_CODE"
}

err () {
  ((_LOGGER_WRAP++)) || true
  error "$*"
}
# }}}
# vim: filetype=sh
